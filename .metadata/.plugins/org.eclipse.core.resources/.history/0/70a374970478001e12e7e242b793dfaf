package com.aurionpro.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.aurionpro.entity.Tutorial;
import com.aurionpro.service.TutorialService;

@RestController
@RequestMapping("/api")
public class TutorialController {

	private TutorialService service;

	public TutorialController(TutorialService service) {
		super();
		this.service = service;
	}

	@GetMapping("/tutorial")
	public ResponseEntity<List<Tutorial>> getAllTutorial() {
		return new ResponseEntity<>(service.findAll(), HttpStatus.OK);
	}
	
	@GetMapping("/{id}")
    public ResponseEntity<Tutorial> getTutorialById(@PathVariable long id) {
        Optional<Tutorial> tutorial = service.findById(id); 
        if (tutorial.isPresent()) {
            return new ResponseEntity<>(tutorial.get(), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping("/byLevel/{level}")
    public ResponseEntity<List<Tutorial>> getTutorialsByLevel(@PathVariable int level) {
        List<Tutorial> tutorials = service.findByLevel(level); 
        return new ResponseEntity<>(tutorials, HttpStatus.OK);
    }

    @GetMapping("/published")
    public ResponseEntity<List<Tutorial>> getPublishedTutorials() {
        List<Tutorial> tutorials = service.findByPublished(true); 
        return new ResponseEntity<>(tutorials, HttpStatus.OK);
    }

    @GetMapping("/byLevelIs/{level}")
    public ResponseEntity<List<Tutorial>> getTutorialsByLevelIs(@PathVariable int level) {
        List<Tutorial> tutorials = service.findByLevelIs(level); 
        return new ResponseEntity<>(tutorials, HttpStatus.OK);
    }

    @GetMapping("/byLevelEquals/{level}")
    public ResponseEntity<List<Tutorial>> getTutorialsByLevelEquals(@PathVariable int level) {
        List<Tutorial> tutorials = service.findByLevelEquals(level); 
        return new ResponseEntity<>(tutorials, HttpStatus.OK);
    }

}